from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from dispatcher import dp
from handlers.keyboards import functions, convert_menu, payment_type, countryinfo_menu, exchangerate_menu
from Classes.Converter import CurrencyConvertor
from Classes.StringFormat import StringFormat
from Classes.Credit import Credit
from Classes.CountryInfo import CountryInfo
from Classes.ExchangeRate import ExchangeRate


class ExchangeRateStates(StatesGroup):
    choose_currency = State()


class CountryinfoStates(StatesGroup):
    choose_country = State()


class ConvertingStates(StatesGroup):
    src = State()
    dst = State()
    amount = State()


class CreditStates(StatesGroup):
    amount = State()
    period = State()
    perc = State()
    type = State()


class DepositStates(StatesGroup):
    amount = State()
    period = State()
    perc = State()


@dp.message_handler(commands='start')
async def start_cmd(message: types.Message):
    start_message = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –§–∏–Ω–±–æ, –∏ —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. \n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
    await message.answer(start_message, reply_markup=functions)


@dp.callback_query_handler(text='/FAQ')
async def start_cmd(callback: types.CallbackQuery):
    FAQ_message = (f"–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python'"
                   f"\n–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Å—Ç—É–¥–µ–Ω—Ç –ö–ù–ê–î –§–ö–ù –í–®–≠ [https://t.me/Itisartemka]. –ë—É–¥—É —Ä–∞–¥ –ª—é–±–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!"
                   f"\n–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:")
    await callback.message.answer(FAQ_message, reply_markup=functions)


@dp.callback_query_handler(text='/exchangerate')
async def exchange_cmd(callback: types.CallbackQuery):
    await callback.message.answer('–ö—É—Ä—Å –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=exchangerate_menu)
    await ExchangeRateStates.choose_currency.set()


@dp.callback_query_handler(state=ExchangeRateStates.choose_currency)
async def exchange_cmd_src(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['src'] = callback.data
    exchangerate = ExchangeRate(data['src']).get_info()
    await callback.message.answer(f'–í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n'
                                  f'1{data["src"]} = {exchangerate}RUB')
    await state.finish()
    await callback.message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.callback_query_handler(text='/convert')
async def convert_cmd(callback: types.CallbackQuery):
    await callback.message.answer('–ò–∑ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è?', reply_markup=convert_menu)
    await ConvertingStates.src.set()


@dp.callback_query_handler(state=ConvertingStates.src)
async def convert_cmd_src(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['src'] = callback.data
    await callback.message.answer('–í –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∏–º?', reply_markup=convert_menu)
    await ConvertingStates.dst.set()


@dp.callback_query_handler(state=ConvertingStates.dst)
async def convert_cmd_dst(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['dst'] = callback.data
    await callback.message.answer('–ö–∞–∫—É—é —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∏–º?\n')
    await ConvertingStates.amount.set()


@dp.message_handler(state=ConvertingStates.amount)
async def convert_cmd_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        amount = StringFormat(message.text).number_format()
        data['amount'] = amount
        try:
            convert = CurrencyConvertor(data.get("src"), data.get("dst"), float(data.get("amount")))
            convert_result = convert.convertor()
            await message.answer(f'–ö—É—Ä—Å –Ω–∞ {convert_result[0]}\n\n'
                                 f'{data.get("amount")} {data.get("src")} —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ '
                                 f'{round(convert_result[1], 4)} {data.get("dst")}\n\n'
                                 f'–í–Ω–∏–º–∞–Ω–∏–µ! –†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –Ω–µ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É, –∞ –ø–æ '
                                 f'–æ–∫–æ–ª–æ–±–∏—Ä–∂–µ–≤–æ–º—É –∫—É—Ä—Å—É, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç exchangerate-api.com.'
                                 f'–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–æ—Å—è—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. '
                                 f'–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫ –∏–ª–∏ –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç')
        except ValueError:
            await message.answer("–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –§–∏–Ω–±–æ, –§–∏–Ω–±–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç!ü•∫")
    await state.finish()
    await message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.callback_query_handler(text='/credit')
async def credit_cmd(callback: types.CallbackQuery):
    await callback.message.answer('–ö–∞–∫–æ–≤–∞ —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –∏–ª–∏ –∏–ø–æ—Ç–µ–∫–∏?')
    await CreditStates.amount.set()


@dp.message_handler(state=CreditStates.amount)
async def credit_cmd_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        amount = StringFormat(message.text).number_format()
        try:
            data['amount'] = float(amount)
            await message.answer(f'–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –í—ã –±–µ—Ä–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç –∏–ª–∏ –∏–ø–æ—Ç–µ–∫—É? (–≤ –≥–æ–¥–∞—Ö)')
            await CreditStates.period.set()
        except ValueError:
            await message.answer("–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –§–∏–Ω–±–æ, –§–∏–Ω–±–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç!ü•∫")
            await state.finish()
            await message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.message_handler(state=CreditStates.period)
async def credit_cmd_period(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        period = StringFormat(message.text).number_format()
        try:
            data['period'] = float(period)
            await message.answer(f'–ü–æ–¥ –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –í—ã –±–µ—Ä–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç –∏–ª–∏ –∏–ø–æ—Ç–µ–∫—É?')
            await CreditStates.perc.set()
        except ValueError:
            await message.answer("–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –§–∏–Ω–±–æ, –§–∏–Ω–±–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç!ü•∫")
            await state.finish()
            await message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.message_handler(state=CreditStates.perc)
async def credit_cmd_perc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        perc = StringFormat(message.text).number_format()
        try:
            data['perc'] = float(perc)
            await message.answer(f'–ö–∞–∫–æ–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è?', reply_markup=payment_type)
            await CreditStates.type.set()
        except ValueError:
            await message.answer("–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –§–∏–Ω–±–æ, –§–∏–Ω–±–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç!ü•∫")
            await state.finish()
            await message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.callback_query_handler(state=CreditStates.type)
async def credit_cmd_type(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = callback.data
        credit = Credit(data['amount'], data['period'], data['perc'])
    if data['type'] == 'ANU':
        credit_result = credit.ann_int()
        await callback.message.answer(f'–í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n'
                                      f'–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ—Å—Ç–∞–≤–∏—Ç {credit_result[0]} —Ä—É–±–ª–µ–π\n'
                                      f'–í—Å–µ–≥–æ –í—ã –∑–∞–ø–ª–∞—Ç–∏—Ç–µ –±–∞–Ω–∫—É {credit_result[1]} —Ä—É–±–ª–µ–π\n'
                                      f'–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–æ—Å—è—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. '
                                      f'–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫')
    else:
        credit_result = credit.dif_int()
        await callback.message.answer(f'–í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n'
                                      f'–í—Å–µ–≥–æ –í—ã –∑–∞–ø–ª–∞—Ç–∏—Ç–µ –±–∞–Ω–∫—É {credit_result[1]} —Ä—É–±–ª–µ–π\n'
                                      f'–°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {credit_result[0]}'
                                      f'–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–æ—Å—è—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. '
                                      f'–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫')
    await state.finish()
    await callback.message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.callback_query_handler(text='/deposit')
async def deposit_cmd(callback: types.CallbackQuery):
    await callback.message.answer('–ö–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç—ã?')
    await DepositStates.amount.set()


@dp.message_handler(state=DepositStates.amount)
async def deposit_cmd_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        amount = StringFormat(message.text).number_format()
        try:
            data['amount'] = float(amount)
            await message.answer(f'–ö–∞–∫–æ–≤ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞? (–≤ –º–µ—Å—è—Ü–∞—Ö)')
            await DepositStates.period.set()
        except ValueError:
            await message.answer("–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –§–∏–Ω–±–æ, –§–∏–Ω–±–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç!ü•∫")
            await state.finish()
            await message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.message_handler(state=DepositStates.period)
async def deposit_cmd_period(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        period = StringFormat(message.text).number_format()
        try:
            data['period'] = float(period)
            await message.answer(f'–ö–∞–∫–æ–≤ –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∫–ª–∞–¥–∞?')
            await DepositStates.perc.set()
        except ValueError:
            await message.answer("–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –§–∏–Ω–±–æ, –§–∏–Ω–±–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç!ü•∫")
            await state.finish()
            await message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.message_handler(state=DepositStates.perc)
async def deposit_cmd_perc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        perc = StringFormat(message.text).number_format()
        try:
            data['perc'] = float(perc)
            deposit = Credit(data['amount'], data['period'], data['perc'])
            deposit_result = deposit.deposit_total_amount()
            await message.answer(f'–í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n'
                                 f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç {deposit_result} —Ä—É–±–ª–µ–π\n'
                                 f'–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–æ—Å—è—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. '
                                 f'–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫')
            await state.finish()
        except ValueError:
            await message.answer("–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –§–∏–Ω–±–æ, –§–∏–Ω–±–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç!ü•∫")
        await state.finish()
        await message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)


@dp.callback_query_handler(text='/countryinfo')
async def countryinfo_cmd(callback: types.CallbackQuery):
    await callback.message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å??', reply_markup=countryinfo_menu)
    await CountryinfoStates.choose_country.set()


@dp.callback_query_handler(state=CountryinfoStates.choose_country)
async def countryinfo_cmd_src(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['country'] = callback.data
    countryinfo = CountryInfo(data['country'])
    countryinfo_result = countryinfo.get_info()
    await callback.message.answer(f'–í–æ—Ç –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n'
                                  f'–ì–æ–¥–æ–≤–æ–π —Ç–µ–º–ø –ø—Ä–∏—Ä–æ—Å—Ç–∞ –í–í–ü: {countryinfo_result[0]}% –∫ –ø—Ä–æ—à–ª–æ–º—É –≥–æ–¥—É\n'
                                  f'–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã: {countryinfo_result[1]}%\n'
                                  f'–£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏: {countryinfo_result[2]}% –∫ –ø—Ä–æ—à–ª–æ–º—É –≥–æ–¥—É\n'
                                  f'–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {countryinfo_result[3]}%\n\n'
                                  f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–∞–π—Ç–∞ https://tradingeconomics.com/')
    await state.finish()
    await callback.message.answer(text='–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=functions)
